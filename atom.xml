<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>葛木小舍先生的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-14T07:36:39.252Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>葛木小舍先生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java初学日记，</title>
    <link href="http://yoursite.com/2018/12/14/java%E6%97%A5%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/14/java日记/</id>
    <published>2018-12-14T06:57:55.000Z</published>
    <updated>2018-12-14T07:36:39.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一篇关于java的学习笔记"><a href="#这是一篇关于java的学习笔记" class="headerlink" title="这是一篇关于java的学习笔记"></a>这是一篇关于java的学习笔记</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这是一篇关于java的学习笔记&quot;&gt;&lt;a href=&quot;#这是一篇关于java的学习笔记&quot; class=&quot;headerlink&quot; title=&quot;这是一篇关于java的学习笔记&quot;&gt;&lt;/a&gt;这是一篇关于java的学习笔记&lt;/h1&gt;
      
    
    </summary>
    
      <category term="java日记" scheme="http://yoursite.com/categories/java%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="java日记" scheme="http://yoursite.com/tags/java%E6%97%A5%E8%AE%B0/"/>
    
      <category term="菜鸟笔记" scheme="http://yoursite.com/tags/%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构线性表——顺序表的设计思想及实现</title>
    <link href="http://yoursite.com/2018/04/25/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/04/25/顺序表/</id>
    <published>2018-04-25T00:57:33.000Z</published>
    <updated>2018-05-01T13:41:07.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表抽象数据类型概述"><a href="#线性表抽象数据类型概述" class="headerlink" title="线性表抽象数据类型概述"></a>线性表抽象数据类型概述</h1><hr><ul><li>什么是抽象数据类型<br>这里引用一段相关描述：<blockquote><p>我们都知道java在默认情况下，所有的基本数据类型(int,float,boolean等)都支持基本运算，如加减法，这是因为系统已帮我们实现了这些基本数据类型的的基本运算。而对于自定义的数据类型(如类)也需要定义相应的运算，但在实际使用这些自定义的数据类型的运算时需要自己实现相关的运算，也就是说用户自定义的数据类型的运算需要我们自己利用系统提供的基本运算来定义和实现。这些自定义了数据结构(如自定义类)和包含相关运算组合实现的数据类型就称其为抽象数据类型(ADT,Abstract Data Type),因此一个ADT会包含数据声明和运算声明。常用的ADT包含链表、栈、队列、优先队列、二叉树、散列表、图等，所以接下来我们要分析的顺序表和链表也属于ADT范畴.</p><a id="more"></a></blockquote></li></ul><hr><ul><li>Java数据结构中对线性表的定义:</li></ul><blockquote><p> 线性表是由n(n&gt;=0)个类型相同的数据元素a0,a1,…,an-1组成的有限的序列，在数学中记作(a0,a1,…,an-1)，其中ai的数据类型可以是基本数据类型(int,float等)、字符或类。n代表线性表的元素个数，也称其为长度(Length)。若n=0，则为空表；若n &gt; 0，则ai(0 &lt; i &lt; n-1)有且仅有一个前驱(Predecessor)元素ai-1和一个后继(Successor)元素ai+1，a0没有前驱元素，ai没有后继元素。</p></blockquote><p>以上，便是关于线性表抽象数据类型的概述。</p><hr><h1 id="线性表的顺序存储设计和实现（顺序表）"><a href="#线性表的顺序存储设计和实现（顺序表）" class="headerlink" title="线性表的顺序存储设计和实现（顺序表）"></a>线性表的顺序存储设计和实现（顺序表）</h1><ul><li><h2 id="顺序储存结构的设计原理"><a href="#顺序储存结构的设计原理" class="headerlink" title="顺序储存结构的设计原理"></a>顺序储存结构的设计原理</h2><blockquote><p>顺序存储结构底层是利用数组来实现的，而数组可以存储具有相同数据类型的元素集合，如int，float或者自定义类型等，当我们创建一个数组时，计算机操作系统会为该数组分配一块连续的内存块，这也就意味着数组中的每个存储单元的地址都是连续的，因此只要知道了数组的起始内存地址就可以通过简单的乘法和加法计算出数组中第n-1个存储单元的内存地址.</p></blockquote></li></ul><p><img src="https://img-blog.csdn.net/20161030092804983" alt="顺序表存储结构图"></p><blockquote><p> 通过上图可以发现为了访问一个数组元素，该元素的内存地址需要计算其距离数组基地址的偏移量，即用一个乘法计算偏移量然后加上基地址，就可以获得数组中某个元素的内存地址。其中c代表的是元素数据类型的存储空间大小，而序号则为数组的下标索引。整个过程需要一次乘法和一次加法运算，因为这两个操作的执行时间是常数时间，所以我们可以认为数组访问操作能再常数时间内完成，即时间复杂度为O(1)，这种存取任何一个元素的时间复杂度为O(1)的数据结构称之为随机存取结构。</p></blockquote><p>及<code>a1=a0+c,a2=a1+c,a3=a2+c</code>c代表每个数组元素所占存储空间的大小。因为顺序表是一段连续不断的空间里储存的，所以我们只需要用前一个数组元素的存储位置加上其所占的存储空间大小，就可以得出当前数组元素的存储位置，只需要进行简单的加法和乘法运算就可以实现对顺序表中的元素进行基本的插入，删除，查找操作了。</p><p>这里引用一下顺序表的定义：</p><blockquote><p> 线性表的顺序存储结构称之为顺序表(Sequential List),它使用一维数组依次存放从a0到an-1的数据元素(a0,a1,…,an-1)，将ai(0&lt; i &lt;&gt; n-1)存放在数组的第i个元素，使得ai与其前驱ai-1及后继ai+1的存储位置相邻，因此数据元素在内存的物理存储次序反映了线性表数据元素之间的逻辑次序。</p></blockquote><hr><ul><li><h2 id="顺序储存结构的实现"><a href="#顺序储存结构的实现" class="headerlink" title="顺序储存结构的实现"></a>顺序储存结构的实现</h2><p>下面我们分析一下顺序表的实现，前面说了线性表的抽象数据类型的性质，所以我们这里首先要创建一个顺序表接口类用来声明顺序表的各种操作方法。<br>关于接口这里引用Java数据结构中的一段描述：</p><blockquote><p>java语言的接口是一组抽象方法，常量和内嵌型的集合。接口是多继承的，一个接口可以继承多个父接口，接口是一种数据类型，采用抽象的形式来约定，因此接口只有被类实现之后才有意义。<br>一个接口可被多个类实现，<strong>接口提供方法声明与方法实现是相分离的机制。</strong>使实现接口的多个类表现出共同的行为能力，接口声明的抽象方法在实现接口的多个类中表现出多态性。</p></blockquote><hr><ul><li><h3 id="声明接口类"><a href="#声明接口类" class="headerlink" title="声明接口类"></a>声明接口类<list></list></h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">/**</span><br><span class="line"> * 首先声明一个顺序表的接口类&lt;List&gt;,并实现该接口。</span><br><span class="line"> * 泛型参数T表示数据源数的数据类型</span><br><span class="line"> * 定义线性表ADT的基本操作</span><br><span class="line"> * </span><br><span class="line"> * @author MaYaP</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface List&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">boolean isEmpty();  //判断集合是否为空</span><br><span class="line"></span><br><span class="line">int length();  //返回线性表的元素个数(长度)</span><br><span class="line"></span><br><span class="line">T get(int i); // 返回第i个元素</span><br><span class="line"></span><br><span class="line">    void set(int i, T x);  //设置第i个元素的值为x</span><br><span class="line"></span><br><span class="line">int insert(int i, T x); //插入x作为第i个元素</span><br><span class="line"></span><br><span class="line">void append(T x); //在线性表最后插入x元素</span><br><span class="line"></span><br><span class="line">T remove (int i); //删除第i个元素并返回被删除的对象</span><br><span class="line"></span><br><span class="line">void removeAll(); //删除线性表内所有元素</span><br><span class="line"></span><br><span class="line">T search(T key);  //查找，返回首次出现的关键字为key元素,按内容查找</span><br><span class="line"></span><br><span class="line">boolean contain(T x); //判断集合是否包含元素x,及元素x是否属于集合</span><br><span class="line"></span><br><span class="line">void showListInfo();  //显示表长和表内的所有元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  其次，在声明好了接口类后，我们需要对其中声明的方法进行实现，所以接下来我们需要声明一个实现接口方法的类。用来实现接口类中的各种方法。</p><hr><ul><li><h3 id="声明一个实现接口类方法的类SeqList。及实现接口类各种方法的代码。"><a href="#声明一个实现接口类方法的类SeqList。及实现接口类各种方法的代码。" class="headerlink" title="声明一个实现接口类方法的类SeqList。及实现接口类各种方法的代码。"></a>声明一个实现接口类方法的类SeqList。及实现接口类各种方法的代码。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">  /**</span><br><span class="line"> * 声明一个实现接口类方法的类SeqList。及实现接口类各种方法的代码。</span><br><span class="line"> * @author MaYaP</span><br><span class="line"> *</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class SeqList&lt;T&gt; implements List&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">protected Object[] element;  //对象数组存储顺序表的数据类型，保护成员</span><br><span class="line">protected int n; //顺序表的元素个数</span><br><span class="line">/**</span><br><span class="line"> * 构建容量为length的空表</span><br><span class="line"> * @param length</span><br><span class="line"> */</span><br><span class="line">public SeqList(int length) &#123;</span><br><span class="line">this.element = new Object[length]; // 申请数组的存储空间，元素为null,若数组长度小于0，则抛出负数组异常。</span><br><span class="line">this.n=0; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *创建默认容量的空表。</span><br><span class="line"> */</span><br><span class="line">public SeqList()&#123;</span><br><span class="line">this(64);  //调用本类已声明的指定参数列表的构建方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断顺序表是否为空，若为空则返回ture</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return this.n==0; //双等于判断，单等于是赋值。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回顺序表元素个数，长度。</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public int length() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return this.n;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 按序号查找，返回第i个元素，0&lt;i&lt;n.若i越界，则返回null</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public T get(int i) &#123;</span><br><span class="line">if(i&gt;=0 &amp;&amp; i&lt;this.n)</span><br><span class="line">&#123;</span><br><span class="line">int p=i;</span><br><span class="line">//return (T)this.element[i];</span><br><span class="line">    System.out.println(&quot;position=&quot;+p+&quot;,is:&quot;+this.element[i]);//返回第i个元素</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 设置第i个元素为x，0&lt;i&lt;n,若i越界，则抛出序号越界异常，若i=null，则抛出空对象异常。</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void set(int i, T x) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">if(x==null)</span><br><span class="line">throw new NullPointerException(&quot;x==null&quot;);//抛出空对象异常</span><br><span class="line">if(i&gt;=0 &amp;&amp; i&lt;n)</span><br><span class="line">this.element[i]=x;</span><br><span class="line">else throw new java.lang.IndexOutOfBoundsException(i+&quot;&quot;);//抛出序号越界异常</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 插入x做为第i个元素，x!=null，返回x序号，若x==null,则抛出空对象异常 </span><br><span class="line"> * 对序号i采取容错措施，若i&lt;0,则在表头插入x，若i&gt;n,则在表尾插入x。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int insert(int i, T x) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">if(x==null)  </span><br><span class="line">throw new NullPointerException(&quot;x==null&quot;); // 抛出空对象异常</span><br><span class="line">if(i&lt;0) i=0;  //插入在表头</span><br><span class="line">if(i&gt;this.n) i=this.n;  //插入在最后</span><br><span class="line">Object[] source=this.element; // 数组引用赋值，source也引用element</span><br><span class="line">if(this.n==element.length)  // 如果数组满了，则扩充顺序表的数据容量</span><br><span class="line">&#123;</span><br><span class="line">this.element=new Object[source.length*2];  //重新申请一个容量更大的数组</span><br><span class="line">for(int j=0;j&lt;i;j++)  //复制当前数组前i-1个元素</span><br><span class="line">this.element[j]=source[j]; </span><br><span class="line">&#125;</span><br><span class="line">for(int j=this.n-1;j&gt;=i;j--)  //从i开始至表尾的元素向后移动</span><br><span class="line">this.element[j]=source[j];</span><br><span class="line">this.element[i]=x;  </span><br><span class="line">this.n++;  </span><br><span class="line"></span><br><span class="line">System.out.println(&quot;insert a new node:&quot;+this.element[i].toString()+&quot;,in position=&quot;+i);//输出插入元素信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return i++;  //返回x序号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在线性表尾插入x</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void append(T x) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 删除第i个元素，0=&lt;i&lt;0,返回被删除元素，若i越界，则返回 null</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public T remove(int i) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">if(this.n==0 || i&lt;0 || i&gt;this.n )  &#123;</span><br><span class="line">// throw new IndexOutOfBoundsException(i + &quot;&quot;); // 抛出序号越界异常</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T old = (T)this.element[i];  //old 中存储被删除元素</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;node:&quot;+this.element[i].toString()+&quot;,is Delete from the SeqList&quot;);//输出删除信息</span><br><span class="line"></span><br><span class="line">for (int j=i;j&lt;this.n-1;j++)</span><br><span class="line">&#123;</span><br><span class="line">this.element[j]=this.element[j+1];  //元素前移一个位置 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.element[this.n-1]=null; //设置数组元素对象为空，释放原引用实例</span><br><span class="line">this.n--;</span><br><span class="line">return old;  //返回old局部变量引用的对象，传递对象引用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 删除所有元素</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void removeAll() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">this.n=0;  //设置长度为0，未释放数组空间 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断集合是否包含元素x，即元素x是否属于集合</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public boolean contain(T x) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 显示表长和表内所有数据元素</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void showListInfo() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//int i=this.length(); </span><br><span class="line">/**</span><br><span class="line"> * 使用for循环遍历顺序表，输出表内全部内容</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*for(int i=0;i&lt;this.length();i++)</span><br><span class="line">&#123;</span><br><span class="line">int p=i; //重新定义一个整型变量p来记录元素下标，以便输出</span><br><span class="line"></span><br><span class="line">   System.out.println(&quot;insert a new node:&quot;+this.element[i]+&quot;,in position=&quot;+p);</span><br><span class="line">   //输出顺序表内所有插入的元素及其对应的下标序号。</span><br><span class="line">&#125;*/</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(&quot;seqlist len=&quot;+this.length());//输出顺序表的长度length().</span><br><span class="line">/**</span><br><span class="line"> * 通过for循环，以（，，，，）的形式输出所有顺序表内的元素。</span><br><span class="line"> */</span><br><span class="line">System.out.print(&quot;The seqlist is:(&quot;);//打印括号</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * for循环，遍历整个顺序表，并输出其中元素。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;this.length();i++)&#123;</span><br><span class="line">System.out.print(this.element[i]+&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;)&quot;);//输出反括号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line"> * 按内容查找</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public T search(T key) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  其中，关于顺序表的插入，删除，查找，就不在做详细描述了，代码注释都比较详细。</p><hr><p>  当然，在声明了实现接口的类并且实现了其中的构造方法后。我们需要创建main主函数类来测试实现一下我们的顺序表的构造是否成功。</p><hr><ul><li><h3 id="声明main主函数类测试实现接口和接口实现类"><a href="#声明main主函数类测试实现接口和接口实现类" class="headerlink" title="声明main主函数类测试实现接口和接口实现类"></a>声明main主函数类测试实现<list>接口和接口实现类<seqlist></seqlist></list></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  /*</span><br><span class="line"> * 声明main主函数类测试实现&lt;List&gt;接口和接口实现类&lt;SeqList&gt;</span><br><span class="line"> */</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">//创建顺序表</span><br><span class="line">SeqList&lt;Integer&gt; list1 =new SeqList&lt;Integer&gt;();//空表</span><br><span class="line"></span><br><span class="line">//建表，插入新的数据元素</span><br><span class="line">System.out.println(&quot;建表操作：&quot;);</span><br><span class="line">list1.insert(1, 1);  //相当于执行了四次插入操作</span><br><span class="line">list1.insert(2, 2);</span><br><span class="line">list1.insert(3, 3);</span><br><span class="line">list1.insert(4, 4);</span><br><span class="line">list1.showListInfo(); //调用方法，显示表的长度和表内所有的内容</span><br><span class="line"></span><br><span class="line">//查找操作</span><br><span class="line">System.out.println(&quot;查找操作：&quot;);</span><br><span class="line">list1.get(3);</span><br><span class="line"></span><br><span class="line">//插入操作</span><br><span class="line">System.out.println(&quot;插入操作：&quot;);</span><br><span class="line">list1.insert(4, 100);</span><br><span class="line">list1.showListInfo();</span><br><span class="line"></span><br><span class="line">//删除操作</span><br><span class="line">System.out.println(&quot;删除操作：&quot;);</span><br><span class="line">list1.remove(3);</span><br><span class="line">list1.showListInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  这是一个主函数类，用来测试顺序表的各种操作的实现。</p><hr><ul><li><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://blog.csdn.net/javazejian/article/details/52953190" target="_blank" rel="noopener">java数据结构与算法之顺序表与链表深入分析</a></p><hr><p>更新时间：<br>2018.4.29</p></li></ul>]]></content>
    
    <summary type="html">
    
      记录了数据结构线性表中顺序表的储存结构及其实现。
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="菜鸟笔记" scheme="http://yoursite.com/tags/%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>所碰到的问题及解决方案</title>
    <link href="http://yoursite.com/2018/04/21/%E6%89%80%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/04/21/所碰到的问题及解决方案/</id>
    <published>2018-04-21T09:16:20.000Z</published>
    <updated>2018-12-14T08:02:32.612Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h1 id="关于在博客中添加第三方分享服务的问题"><a href="#关于在博客中添加第三方分享服务的问题" class="headerlink" title="关于在博客中添加第三方分享服务的问题"></a>关于在博客中添加第三方分享服务的问题</h1></li></ul><hr><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h2 id="关于博客第三方分享服务的实现过程中所出现的问题，在这里详细描述如下"><a href="#关于博客第三方分享服务的实现过程中所出现的问题，在这里详细描述如下" class="headerlink" title=" 关于博客第三方分享服务的实现过程中所出现的问题，在这里详细描述如下"></a> 关于博客第三方分享服务的实现过程中所出现的问题，在这里详细描述如下</h2><ul><li><h3 id="在开启jia-this分享服务的过程中所出现的问题："><a href="#在开启jia-this分享服务的过程中所出现的问题：" class="headerlink" title="在开启jia this分享服务的过程中所出现的问题："></a>在开启jia this分享服务的过程中所出现的问题：</h3><p>能够成功开启，并且能够在本地服务中正常使用，不过在代码上传到github上之后虽然能够显示出分享片段，不过出现没有按钮，无法成功分享当前页面的问题，点击更多，能够成功分享，但无法分享当前博客主页，只能分享jiathis分享主页。</p></li><li><h3 id="在开启百度分享服务过程中所出现的问题："><a href="#在开启百度分享服务过程中所出现的问题：" class="headerlink" title="在开启百度分享服务过程中所出现的问题："></a>在开启百度分享服务过程中所出现的问题：</h3><p>完全无法打开分享功能，博客页面无法显示。尝试过多种解决方法，均无法解决问题。</p></li><li><h3 id="添加第三方sharesdk分享服务中所出现的问题："><a href="#添加第三方sharesdk分享服务中所出现的问题：" class="headerlink" title="添加第三方sharesdk分享服务中所出现的问题："></a>添加第三方sharesdk分享服务中所出现的问题：</h3><p>代码，服务开启都能够成功实现，并且能够在本地预览中实现分享功能，但显示分享失败，代码上传到github之后，出现了同jiathis分享服务相似的问题，分享按钮无效，第三方分享页面无法打开。</p></li></ul><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>  针对上面问题所尝试的几种方案均无法成功解决问题，在网上也没有查找到相关的问题描述和解决方案<br>  个人观察推测可能是hexo主题配置或者代码上传到github上后出现错误。</p><p>  <strong>该问题尚未解决</strong></p><hr><p>  更新时间：<br>  2018/4/20日</p><hr><ul><li><h1 id="如何控制博文在主页中显示的字段长度"><a href="#如何控制博文在主页中显示的字段长度" class="headerlink" title="如何控制博文在主页中显示的字段长度"></a>如何控制博文在主页中显示的字段长度</h1></li></ul><hr><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>  无法控制博文在博客主页推送的字段长短，使得每一篇博文在主页中都是全部显示，对于长篇的博文十分不便于浏览者观看。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><pre><code>1. 通过&lt;!--more--&gt;标签实现主页显示2. 通过在头部文件中添加描述标签，具体代码如下：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 这是一篇测试博客  #标题</span><br><span class="line">date: 2018-04-12 00:54:31</span><br><span class="line">categories: 博文的创建和编写  #分类</span><br><span class="line">tags:   # 标签</span><br><span class="line">- Markdown</span><br><span class="line">- 博客创建</span><br><span class="line">- 技术分享</span><br><span class="line">- 菜鸟笔记 </span><br><span class="line">#description: 第一篇博文，关于Markdown格式的博文的两种创建方式。  #描述</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p> <strong>问题已解决</strong></p><hr><p>更新时间：<br>2018/4/22日</p><hr><ul><li><h1 id="如何在博文中用灰色字块标记某段博文"><a href="#如何在博文中用灰色字块标记某段博文" class="headerlink" title="如何在博文中用灰色字块标记某段博文"></a>如何在博文中用灰色字块标记某段博文</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>有时候我们需要标记博文中某一字段的博文，而markdown语言中却没有支持某字段的标记标签。而引用，代码注释标签，都无法在文本中间插入对某字段进行标记使用。</p><hr><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>思路：由于markdown语言是支持部分HTML语言标签的，所以我们可以尝试使用HTML标签来进行某一字段的标记。</p><blockquote><p>code标签的定义: &lt; code &gt;标签， 用于表示计算机源代码或者其他机器可以阅读的文本内容。软件代码的编写 者习惯了编写代码时的代码格式，那么这个&lt; code &gt;标签就是为软件代码编写者设计的， code标签内的文本将用等宽、类似电传打字机样式的字体（Courier）显示出来。</p></blockquote><p> 其使用后的效果是这样的：<code>这是一段使用&lt; code &gt;标签标记的字段 </code></p></li></ul><p><strong>问题已解决</strong></p><hr><p>更新时间：<br>2018/4/22日</p><hr><ul><li><h1 id="控制博文主页博文数及NexT主题的一些其他使用问题"><a href="#控制博文主页博文数及NexT主题的一些其他使用问题" class="headerlink" title="控制博文主页博文数及NexT主题的一些其他使用问题"></a>控制博文主页博文数及NexT主题的一些其他使用问题</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2>关于NexT主题使用的一些常见问题，和常见配置问题。<h2 id="解决方案-："><a href="#解决方案-：" class="headerlink" title="解决方案 ："></a>解决方案 ：</h2>这里由于问题比较简单，并且在Next使用文档中都有收录，所以在这里就不一一详细介绍了，这里直接引用* NexT使用文档的相关网页：</li><li><strong><a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">常见问题-NexT 使用文档</a></strong><br>这是一个Next 主题的官方使用文档中的一个常见问题的收录和解决网页。</li></ul><hr><p>更新时间:<br>2018/4/23日</p><hr><ul><li><h1 id="控制博文抬头信息，及博客创建后无法生成的问题。"><a href="#控制博文抬头信息，及博客创建后无法生成的问题。" class="headerlink" title="控制博文抬头信息，及博客创建后无法生成的问题。"></a>控制博文抬头信息，及博客创建后无法生成的问题。</h1><h2 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h2>在新建博客后，无法在本地浏览器查看生成的博客页面，创建的文件没有生成。在git 命令行<code>$ hexo s</code> 后显示如下问题：<br><img src="http://m.qpic.cn/psb?/V11lQmUe2osSky/oQ.XszsumoBlBcJK1SQcgaIm*zIkKRbXtqH5kFJk0OI!/b/dL8AAAAAAAAA&amp;bo=bQJMAAAAAAADBwE!&amp;rf=viewer_4" alt="git错误"><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2>在查看相关问题描述后，知道了问题所在，并且其实通过git命令行的错误提示也可找出原因，是markdown文件的头文件的格式书写错误。tags的定义方式出错，导致无法生成文件。之后查看相关网页，可以通过<code>scaffolds下的post.md</code>文件配置创建博客文件的初始默认信息。<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><a href="http://ijiaober.github.io/2014/08/05/hexo/hexo-04/" target="_blank" rel="noopener">hexo 使用攻略 </a></li></ul><hr><p>更新时间：<br>2018/12/14日</p><hr>]]></content>
    
    <summary type="html">
    
      这是一篇记录和更新个人学习过程中所碰到的一些问题及其解决方案的博文。其中包括一些比较简单的基础问题，也包括一些比较难的还无法解决的问题，本博文将会持续更新动态，以及寻找问题的解决办法。仅供大家参考。
    
    </summary>
    
      <category term="问题记录" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="菜鸟笔记" scheme="http://yoursite.com/tags/%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>基于hexo+github搭建个人博客</title>
    <link href="http://yoursite.com/2018/04/20/%E5%9F%BA%E4%BA%8Ehexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/20/基于hexo-github搭建个人博客/</id>
    <published>2018-04-20T07:11:25.000Z</published>
    <updated>2018-04-23T07:53:28.854Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>1.github pages服务生成的全是静态文件，访问速度快；<br>2.免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；<br>3.可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；<br>4.数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；<br>5.博客内容可以轻松打包、转移、发布到其它平台；</p></blockquote></li></ul><a id="more"></a><hr><ul><li><h1 id="hexo、git配置和安装"><a href="#hexo、git配置和安装" class="headerlink" title="hexo、git配置和安装"></a>hexo、git配置和安装</h1><h2 id="什么是hexo？"><a href="#什么是hexo？" class="headerlink" title="什么是hexo？"></a>什么是hexo？</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote></li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装hexo只需要几分钟，但前提是你的确保你的电脑中已经安装了下列应用程序：</p><hr><h3 id="下载必须程序"><a href="#下载必须程序" class="headerlink" title="下载必须程序"></a>下载必须程序</h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><blockquote><p>Node.js是一个Javascript运行环境(runtime)</p></blockquote></li></ul><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a><blockquote><p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br>从上面链接下载git for windows最好挂一个代理，否则下载速度会十分缓慢，你可以参考<strong><a href="https://github.com/waylau/git-for-win/blob/master/README.md" target="_blank" rel="noopener">这个页面</a></strong>,其中收录了存储于百度云的下载地址。</p></blockquote></li></ul><p>下载之后你可以在你想要创建博客的位置新建一个文件夹，进行node.js和git的安装，打开安装包，按顺序安装即可。<br>安装完成后可以打开cmd命令行检查是否安装完成：<br><img src="/images/安装测试.png" alt="cmd安装检查"></p><hr><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>   <img src="/images/git命令行目录.png" alt="打开git命令行"></p><p>   打开git命令行输入以下代码安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p><img src="/images/安装成功.png" alt="安装成功"></p><hr><ul><li><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1>安装好hexo后执行下列操作来生成所需要的文件</li></ul><hr><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>在你的电脑选取一个你想要存放这个网页的代码的文件夹，然后在里面新建一个hexo文件夹。</p></blockquote><p>在git命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /d/网页设计/hexo</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p><img src="/images/hexo初始化.png" alt="初始化"><br><img src="/images/初始化2.png" alt="初始化2"></p><p>下载完成后，会在对应的hexo文件中自动生成对应文件。</p><h2 id="生成文件和启用预览服务"><a href="#生成文件和启用预览服务" class="headerlink" title="生成文件和启用预览服务"></a>生成文件和启用预览服务</h2><p>在git命令行中输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动服务</span><br></pre></td></tr></table></figure></p><p><img src="/images/生成.png" alt="生成文件"><br>会在public文件中生成相关的HTML文件。</p><p><img src="/images/启动服务.png" alt="启用服务"><br>用来启用本地预览服务，启用后就可以通过<strong><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></strong>来预览博客内容。<br><img src="/images/初始博客.png" alt="初始博客主页"><br>如果一切顺利，访问以上预览链接应当出现这样的一个默认博客主页。<br>至这一步，一个基于hexo的blog就搭建完成了。</p><hr><h1 id="如何将博客部署到github"><a href="#如何将博客部署到github" class="headerlink" title="如何将博客部署到github"></a>如何将博客部署到github</h1><p><strong>在生成博客初始页面后，我们的博客还不算完成，因为我们只能看到的知识hexo提供的一个本地预览网页，别人是看不到的，那么如何才能让别人也可以访问的到我们的博客呢，那就需要我们把博客部署到网上了，这里，我选择的是github。</strong></p><hr><h2 id="注册github账户和新建仓库"><a href="#注册github账户和新建仓库" class="headerlink" title="注册github账户和新建仓库"></a>注册github账户和新建仓库</h2><p>首先，我们需要在github上有一个账户。</p><p><strong><a href="https://github.com/" target="_blank" rel="noopener">github官网</a></strong></p><p>点击链接进入github官网注册。<br><img src="/images/github注册.PNG" alt="github注册"><br>注册好之后点击sign in登录github。</p><p><img src="/images/新建仓库.PNG" alt="新建仓库"><br>点击new repository新建一个名为<code>你的用户名.github.io</code>的仓库。如我的用户名是gemuxiaoshe，那么我就需要新建一个<code>gemuxiaoshe.github.io</code>的仓库，这样你之后的网站地址就可以直接使用<strong><a href="https://gemuxiaoshe.github.io/" target="_blank" rel="noopener">https://gemuxiaoshe.github.io/</a></strong>访问仓库了。</p><hr><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><blockquote><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p></blockquote><hr><p>我们在github命令行中输入以下命令来检测本机已存在的ssh密匙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><blockquote><p>如果提示：No such file or directory 说明你是第一次使用git。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>在github命令行中输入以上命令，然后连续三次回车。最后会在你的用户目录下生成一个id_rsa.pub文件,<br>找到并打开它（可以直接使用记事本打开），复制里面的全部内容，然后打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br><img src="http://image.liuxianan.com/201608/20160818_143914_495_9084.png" alt="ssh key"><br>将刚复制的内容粘贴到key那里，title随便填，保存。</p><p>输入以下命令测试SSH key是否配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure></p><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes</p><blockquote><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><p>最后我们还需要配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p><hr><h2 id="部署代码到github上"><a href="#部署代码到github上" class="headerlink" title="部署代码到github上"></a>部署代码到github上</h2><p>在配置还SSH key之后，我们上传代码就很容易了</p><hr><p>这时候我们还不能直接使用hexo d 上传代码，因为我们还有_config.yml没有配置。<br>打开_config.yml站点配置文件,目录为：<code>D:\网页设计\hexo_config.yml</code><br>找到<code>deploy</code>关键词进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:liuxianan/liuxianan.github.io.git #你的用户名和你新建的仓库名</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>配置成功之后，我们可以尝试使用hexo d 来上传我们的代码，但这个时候应当是无法上传成功的。<br>它会出现以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure></p><p>表示它没有发现git</p><p>这是因为我们还需要安装一个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装成功后我们就可以开始上传我们的代码了<br>首先我们用<code>hexo g</code>来生成一下文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>再输入以下命令上传代码到github上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p><img src="/images/上传.PNG" alt="上传"><br>上传成功！之后你可以登录你的github主页查看代码是否上传成功。<br>并且可以直接使用你之前设置好的仓库地址<a href="https://gemuxiaoshe.github.io/" target="_blank" rel="noopener">https://gemuxiaoshe.github.io/</a>登录到你的博客主页了。</p><hr><h1 id="博客的进阶学习主题的更改和优化以及博客的创建和编写"><a href="#博客的进阶学习主题的更改和优化以及博客的创建和编写" class="headerlink" title="博客的进阶学习主题的更改和优化以及博客的创建和编写"></a>博客的进阶学习主题的更改和优化以及博客的创建和编写</h1><p>至此，博客搭建才算正式完成，你的博客将可以被访问到。不过到目前我们只是刚刚创建了一个默认的博客主页，和一篇默认的博客，且这个默认主页当然是不可能让我们满意的，并且其功能也肯定会有所不足。那么我们首先，我们还需要进行的最基本的工作就是学习如何修改和优化我们的主题，并且学习博客的创建和编写。</p><h2 id="关于博客的创建和编写可以参考我的另两篇博文"><a href="#关于博客的创建和编写可以参考我的另两篇博文" class="headerlink" title="关于博客的创建和编写可以参考我的另两篇博文"></a><strong>关于博客的创建和编写可以参考我的另两篇博文</strong></h2><ul><li><a href="https://gemuxiaoshe.github.io/2018/04/12/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/" target="_blank" rel="noopener">这是一篇测试博客</a><br>主要介绍了博文的两种创建方式。</li><li><a href="https://gemuxiaoshe.github.io/2018/04/11/markdown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">markdown语言中基本标签的使用</a><br>主要介绍了博文编写所较常使用的markdown标记语言的基本使用方法</li></ul><h2 id="关于博客主题的修改和优化可以参考下面的网站，在这里就不进行详细过程的介绍了"><a href="#关于博客主题的修改和优化可以参考下面的网站，在这里就不进行详细过程的介绍了" class="headerlink" title="关于博客主题的修改和优化可以参考下面的网站，在这里就不进行详细过程的介绍了"></a><strong>关于博客主题的修改和优化可以参考下面的网站，在这里就不进行详细过程的介绍了</strong></h2><ul><li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 使用文档</a></li></ul><p>NexT 一款基于hexo的主题，NexT 使用文档详细的介绍了基于hexo的主题NexT的使用方法，和NexT主题的配置方法，以及各种第三方服务的配置方法，同时也包括一些基本的站点文件配置。其中配置方式是适用于多种主题的。</p><ul><li><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a><br>一个简书上的Next主题的个性化配置教程，其中还包括一些Next使用文档所没有的进阶配置，比较详细的介绍了主题的各种个性化配置。。</li></ul><hr><h2 id="关于分享功能实现的补充"><a href="#关于分享功能实现的补充" class="headerlink" title="关于分享功能实现的补充"></a>关于分享功能实现的补充</h2><p>由于我使用的百度分享和jiathis分享均出现了问题，并且并没有找到解决的办法，于是使用了另外一个第三方分享服务sharesdk。</p><ul><li><p>具体实现方法请点击下面链接<br><a href="https://blog.csdn.net/captain_magicer/article/details/54413833" target="_blank" rel="noopener">为Hexo NexT主题添加ShareSDK的分享</a></p></li><li><p>关于分享功能的的尝试结果</p></li></ul><p>在最终尝试了各种分享服务后还是发现我的分享功能还是没能在基于github上实现，在网上也没有找到相关的问题描述和解决方式。非常遗憾只能暂时放弃分享功能的使用。在之后的过程中再来补充。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><hr><ul><li><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo使用文档</a><br>hexo的官方使用文档，十分详细的总结归纳了hexo的各种使用方法。</p></li><li><p><a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的博客园</a><br>一个比较详细的hexo+github搭建博客的教程</p></li><li><p><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a><br>一个next主题修改优化教程</p></li><li><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT 使用文档</a><br>next主题的官方使用文档，十分详细的介绍了next主题的各种使用方法</p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1.github pages服务生成的全是静态文件，访问速度快；&lt;br&gt;2.免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；&lt;br&gt;3.可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;br&gt;4.数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；&lt;br&gt;5.博客内容可以轻松打包、转移、发布到其它平台；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="技术分享" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="博客创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>简记个人博客搭建历程</title>
    <link href="http://yoursite.com/2018/04/20/%E7%AE%80%E8%AE%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/20/简记个人博客搭建历程/</id>
    <published>2018-04-20T05:28:56.000Z</published>
    <updated>2018-04-22T04:26:20.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客的起因"><a href="#搭建个人博客的起因" class="headerlink" title="搭建个人博客的起因"></a>搭建个人博客的起因</h1><hr><p><strong>由于一直是计算机专业，所以在很久之前，便想搭建一个属于自己的个人博客。但苦于一直没有时间，也没有接触过这方面的东西等原因，一直没能实现。直到我们开了HTML课程，正好涉及到网页设计这方面，而课程的最终任务，就是设计一个独立网页。这时，我便恰好使用这个机会开始了个人博客搭建的探索。</strong></p><a id="more"></a><hr><h1 id="基于wordPress的博客尝试"><a href="#基于wordPress的博客尝试" class="headerlink" title="基于wordPress的博客尝试"></a>基于wordPress的博客尝试</h1><hr><p>在博客搭建的初期，经过一系列的搜索和查找相关资料后，我首先选择的是wordPress提供的一个博客服务，其原因有三点：</p><ul><li>它是一个评价较好的比较大众的博客平台</li><li>它也提供一个免费的博客服务和域名支持，可以不用任何花费便可被访问到</li><li>它的搭建过程可以是极简单的，同时也支持更自由的博客创建方式</li></ul><p>但在使用不久我就放弃了使用wordpress的博客服务，主要出于其创建过于简单，只需要注册账户，选好主题就可以快速创建属于自己的博客，且其免费的博客服务中众多的功能都受到了限制，需要付费使用，无法涉及到更基础的网页设计知识。对我的帮助较小。</p><hr><h1 id="基于github-HTML的博客尝试"><a href="#基于github-HTML的博客尝试" class="headerlink" title="基于github+HTML的博客尝试"></a>基于github+HTML的博客尝试</h1><hr><p> 放弃使用wordpress的博客服务之后，已经对博客搭建这方面有了一定的了解了，并且在HTML的课程中也开始了网页设计的尝试。在这个过程中，通过查找资料，找到了一个比较好的博客搭建方式，那就是github代码寄存库。github是一个代码保存网站，并且它是免费给予用户500兆空间，在github中它会给我们自动生成一个静态页面，并且它是可以被访问的，也就是说我们只需要把我们自己编写好的网页代码上传到github上，我们便可以通过其自动生成的静态网页访问到我们的主页了。通过这种方式，我开始了第二次博客搭建的历程。github所具备的优点：</p><ul><li>完全免费</li><li>开放性和极度的自由性，github是一个开放的代码交流和分享的平台。并且其代码完全可以由自己编写</li><li>具有一定深度，适合专业方面的人员使用，你可以在github上fork他人代码学习和研究，也可以自己编写代码，上传分享。适合学习。</li></ul><p>在一段时间的摸索中，我成功的创建并上传了我的第二个博客，并可以被访问，代码基于HTML，是在学习HTML的过程中一点一点摸索着设计出来的。不过由于基础知识的严重缺乏，所编写的博客十分简陋，基本不具备可用性，和阅读性。我便暂时停止了第二个博客的编写，在之后的学习过程中，再来更新设计这个网页。目前暂时放下。</p><p>之后便开始尝试直接在其他的HTML博客主题上摸改博客，搭建自己的第三个博客，这个过程同样是漫长而枯燥的，不过最终的还是取得了不错的效果，并且在摸改过程中，对于HTML，css，都有了一定的了解，不再是一眼黑了。</p><p>但在不久后，我便也暂时放弃了第三个博客的更新和维护，其主要原因是已经达到了一个瓶颈，无法再短时间内做出功能更加强大的改变了，而博客功能又过于简单，无法满足一个完善博客的基本要求。我便暂时放弃了它的设计和维护，只做了一些简单的内容更新。</p><ul><li><h2 id="详细创建过程请看："><a href="#详细创建过程请看：" class="headerlink" title="详细创建过程请看："></a>详细创建过程请看：</h2></li></ul><hr><h1 id="基于hexo-github的博客尝试"><a href="#基于hexo-github的博客尝试" class="headerlink" title="基于hexo+github的博客尝试"></a>基于hexo+github的博客尝试</h1><hr><p> 由于数据结构课程，开始接触到了hexo博客创建的方式。hexo是一个快速，简洁且高效的博客框架，并且其功能十分齐全，支持markdown语言编辑博文。同时其也是一个开放性的平台，拥有着众多主题，你可以根据这个框架摸改他人博客模板，也可以自己依据hexo来快速编写自己的博客框架。同时它可以一键部署到各平台，网站。于是，我便开始了基于github上的hexo博客搭建过程。这个过程无疑是搭建博客以来最为繁琐的一次，因为这是一种全新的博客搭建方式。不过好在有hexo的使用文档可以帮助我们搭建博客。在经历一段时间的摸索和各种失败，和各种问题后。我也终于搭建好了这第四个个人博客，使用next主题，其主题文件配置，及站点文件配置着实花费了不少时间。但最终总算成功完成博客的搭建，还算是小有收获，在这个过程中最主要的应该就是了解了markdown语言的使用了。</p><ul><li><h2 id="详细搭建过程请看博文："><a href="#详细搭建过程请看博文：" class="headerlink" title="详细搭建过程请看博文："></a>详细搭建过程请看博文：</h2><ul><li><strong><a href="https://gemuxiaoshe.github.io/2018/04/20/%E5%9F%BA%E4%BA%8Ehexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">基于hexo+github搭建个人博客</a></strong><br>这是我的一个博客搭建笔记，比较详细的介绍了基于hexo+github的博客搭建过程。</li></ul></li></ul><hr><blockquote><p><strong>本博客即是基于hexo+github搭建的第四个博客，同时本篇博文也是使用markdown语言书写。</strong></p></blockquote><hr><h1 id="最后附上各阶段博客地址"><a href="#最后附上各阶段博客地址" class="headerlink" title="最后附上各阶段博客地址"></a>最后附上各阶段博客地址</h1><ul><li><p><a href="https://gemumiaoshe.wordpress.com/" target="_blank" rel="noopener">个人博客</a><br>这是基于wordpress创建的第一个博客，基本没怎么使用</p></li><li><p><a href="https://gemuxiaoshe.github.io/Sworld/" target="_blank" rel="noopener">葛木小舍先生的小世界</a><br>这是基于HTML的个人编写的静态个人网页，之后将会持续更新</p></li><li><p><a href="https://gemuxiaoshe.github.io/qw/" target="_blank" rel="noopener">葛木小舍先生的个人博客</a><br>这是基于HTML主题的模改个人博客</p></li><li><p><a href="https://gemuxiaoshe.github.io/" target="_blank" rel="noopener">葛木小舍先生的博客</a><br>这是目前在使用的个人博客，基于hexo搭建。</p></li></ul><hr><p> <strong>以上博客代码均存放在github，网址使用的是github默认位置</strong> </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建个人博客的起因&quot;&gt;&lt;a href=&quot;#搭建个人博客的起因&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客的起因&quot;&gt;&lt;/a&gt;搭建个人博客的起因&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;由于一直是计算机专业，所以在很久之前，便想搭建一个属于自己的个人博客。但苦于一直没有时间，也没有接触过这方面的东西等原因，一直没能实现。直到我们开了HTML课程，正好涉及到网页设计这方面，而课程的最终任务，就是设计一个独立网页。这时，我便恰好使用这个机会开始了个人博客搭建的探索。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心得总结" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="博文创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E6%96%87%E5%88%9B%E5%BB%BA/"/>
    
      <category term="个人心得" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>这是一篇测试博文</title>
    <link href="http://yoursite.com/2018/04/12/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2018/04/12/测试文档/</id>
    <published>2018-04-11T16:54:31.000Z</published>
    <updated>2018-04-22T13:14:07.773Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>这是葛木小舍先生的第一篇博文</p></blockquote><div class="note info"><p>I love three things:the sun ,the moon and you.<br>the sun is for the day ,the moon is for the night<br>and you forever.<br>我爱三样东西，太阳，月亮和你。<br>太阳留给白天，<br>月亮留给夜晚，<br>而你，是永远。</p></div><hr><a id="more"></a><h1 id="关于新建博文的两种方法："><a href="#关于新建博文的两种方法：" class="headerlink" title="关于新建博文的两种方法："></a>关于新建博文的两种方法：</h1><ul><li><h2 id="通过git命令窗口新建博文"><a href="#通过git命令窗口新建博文" class="headerlink" title="通过git命令窗口新建博文"></a>通过git命令窗口新建博文</h2></li></ul><p>这一篇博文是直接由git命令窗口创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/gemuxiaoshe/aw/master/2018-4-11.PNG" alt="c"></p><p>通过命令行创建.md格式的Markdown文件，之后找到其所在的位置。打开它（Markdown文档是纯文本文档，可以用任何文本编辑器打开编辑）进行编辑。</p><hr><ul><li><h2 id="直接新建-md格式文档放到博客目录下新建博文"><a href="#直接新建-md格式文档放到博客目录下新建博文" class="headerlink" title="直接新建.md格式文档放到博客目录下新建博文"></a>直接新建.md格式文档放到博客目录下新建博文</h2>我们可以直接找到博文存放的位置，直接在里面新建.md文件创建</li></ul><p><img src="https://raw.githubusercontent.com/gemuxiaoshe/aw/master/2018-4-11-2.PNG" alt="博文目录"></p><ul><li><strong>这里需要注意的是：</strong><br>在文件的开始，一定的需要加上title等必要元素，这样它才能在博客中显示出来。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 这是一篇测试博客 #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2018-04-11 17:10:10 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">写作|hexo</a><br>这是一个关于hexo的使用的官方网站。</li><li><a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的博客园</a><br>这是我参考的一个基于hexo+github的一个比较详细的博客搭建教程</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这是葛木小舍先生的第一篇博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;I love three things:the sun ,the moon and you.&lt;br&gt;the sun is for the day ,the moon is for the night&lt;br&gt;and you forever.&lt;br&gt;我爱三样东西，太阳，月亮和你。&lt;br&gt;太阳留给白天，&lt;br&gt;月亮留给夜晚，&lt;br&gt;而你，是永远。&lt;/p&gt;&lt;/div&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="博文的创建和编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E6%96%87%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BC%96%E5%86%99/"/>
    
    
      <category term="菜鸟笔记" scheme="http://yoursite.com/tags/%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="博客创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>markdown标记语言中基本标签的使用</title>
    <link href="http://yoursite.com/2018/04/11/markdown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/11/markdown标记语言的使用/</id>
    <published>2018-04-11T09:26:10.000Z</published>
    <updated>2018-12-14T07:38:54.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown 的目标是实现「易读易写」。<br>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，&gt;并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML &gt;格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最&gt;大灵感来源其实是纯文本电子邮件的格式。<br>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文&gt;字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引&gt;用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p></blockquote><a id="more"></a><hr><h1 id="markdown语言的基本标签"><a href="#markdown语言的基本标签" class="headerlink" title="markdown语言的基本标签"></a>markdown语言的基本标签</h1><h2 id="所有的Markdown语言标签在使用中都应当是需要在后面带一个空格再加内容来使用的。"><a href="#所有的Markdown语言标签在使用中都应当是需要在后面带一个空格再加内容来使用的。" class="headerlink" title="所有的Markdown语言标签在使用中都应当是需要在后面带一个空格再加内容来使用的。"></a>所有的Markdown语言标签在使用中都应当是需要在后面带一个空格再加内容来使用的。</h2><hr><ul><li><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h2><h3 id="标题使用-符号，其数目以此对应h1-h6级标题。"><a href="#标题使用-符号，其数目以此对应h1-h6级标题。" class="headerlink" title="标题使用# 符号，其数目以此对应h1-h6级标题。"></a>标题使用# 符号，其数目以此对应h1-h6级标题。</h3></li></ul><hr><h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br></pre></td></tr></table></figure><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3><h4 id="这是一个四级标题"><a href="#这是一个四级标题" class="headerlink" title="这是一个四级标题"></a>这是一个四级标题</h4><h5 id="这是一个五级标题"><a href="#这是一个五级标题" class="headerlink" title="这是一个五级标题"></a>这是一个五级标题</h5><h6 id="这是一个六级标题"><a href="#这是一个六级标题" class="headerlink" title="这是一个六级标题"></a>这是一个六级标题</h6><hr><ul><li><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><h3 id="段落在Markdown里是不需要任何特殊标记的，可以直接进行输入。"><a href="#段落在Markdown里是不需要任何特殊标记的，可以直接进行输入。" class="headerlink" title="段落在Markdown里是不需要任何特殊标记的，可以直接进行输入。"></a>段落在Markdown里是不需要任何特殊标记的，可以直接进行输入。</h3></li></ul><hr><p>段落1</p><p>段落2</p><hr><ul><li><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="最简单的引用标签直接用-gt-符号就好了"><a href="#最简单的引用标签直接用-gt-符号就好了" class="headerlink" title="最简单的引用标签直接用&gt; 符号就好了."></a>最简单的引用标签直接用&gt; 符号就好了.</h3></li></ul><hr><ul><li>普通引用方式</li></ul><blockquote><p>引用内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是葛木小舍先生的第一篇博客</span><br></pre></td></tr></table></figure><hr><ul><li>Bootstrap Callout</li></ul><hr><p>使用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>其中, <code>class_name</code> 可以是以下列表中的一个值： </p><ul><li><p><code>default</code></p><div class="note default"><p>Content of default bs-callout </p></div>* <code>primary</code> <div class="note primary"><p>Content of primary bs-callout </p></div></li><li><p><code>success</code></p><div class="note success"><p>Content of success bs-callout </p></div>* <code>info</code><div class="note info"><p>Content of info bs-callout </p></div></li><li><p><code>warning</code></p><div class="note warning"><p>Content of waning bs-callout </p></div>* <code>danger</code><div class="note danger"><p>Content of danger bs-callout </p></div></li></ul><hr><ul><li><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表可以使用-符号作为列表标记。"><a href="#列表可以使用-符号作为列表标记。" class="headerlink" title="列表可以使用- + * 符号作为列表标记。"></a>列表可以使用- + * 符号作为列表标记。</h3>并且列表是可以嵌套使用的。</li></ul><hr><ul><li>这是一个无序列表</li></ul><ul><li>这是一个无序列表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 这是一个无序列表</span><br><span class="line">* 这是一个无序列表</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这是一个父类列表<ul><li>这是一个子类列表</li></ul></li></ul><hr><ul><li><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="可以是网站，也可以是一张图片的链接。"><a href="#可以是网站，也可以是一张图片的链接。" class="headerlink" title="可以是网站，也可以是一张图片的链接。"></a>可以是网站，也可以是一张图片的链接。</h3></li></ul><hr><ul><li>这是一个个人博客的链接</li></ul><p><a href="https://gemumiaoshe.wordpress.com/" target="_blank" rel="noopener">葛木小舍先生的小世界</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[葛木小舍先生的小世界](https://gemumiaoshe.wordpress.com/) </span><br><span class="line"></span><br><span class="line">#在这里是用[链接名](链接地址)的形式构成链接</span><br></pre></td></tr></table></figure><ul><li><p>这是葛木小舍先生的个人博客</p><p><a href="https://gemumiaosheWordPress.com" target="_blank" rel="noopener">https://gemumiaosheWordPress.com</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是葛木小舍先生的个人博客</span><br><span class="line">&lt;https://gemumiaosheWordPress.com&gt;</span><br><span class="line">#这里是直接用尖括号&lt;地址&gt;来直接构成链接。</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这里是插入图片链接的两种方式：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/95646-5bfd0cecf587c766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="这是一张图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![这是一张图片](https://upload-images.jianshu.io/upload_images/95646-5bfd0cecf587c766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)</span><br><span class="line">#和直接插入网页的方式是相似的，这里只需要在[]前加一个感叹号就可以了。</span><br><span class="line">使用![图片的备用显示名](图片地址)的形式就可以了</span><br></pre></td></tr></table></figure><hr><p><img src="https://upload-images.jianshu.io/upload_images/95646-5bfd0cecf587c766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" width="200px" hight="200px" alt="简书" left=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/95646-5bfd0cecf587c766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; width=200px hight=200px alt=&quot;简书&quot; left  &gt;</span><br><span class="line">#这里是直接使用html中插入图片的&lt;img src=&quot;图片地址&quot;&gt;的形式插入图片的。</span><br></pre></td></tr></table></figure><blockquote><p>在这里，就插入图片的地址有两点需要注意，图片地址可以是它的网页存储地址，如果是本地的相对地址，则需要注意。<br>你可以选择把你需要用到的图片上传到网页上保存，再来进行引用。在这里使用的图片都是使用的第一种方式，我的图片是存在github上的。</p></blockquote><hr><ul><li><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><h3 id="在markdown中引用一段代码是很容易的，只需要用两行半角单引号将代码包裹住就可以了。"><a href="#在markdown中引用一段代码是很容易的，只需要用两行半角单引号将代码包裹住就可以了。" class="headerlink" title="在markdown中引用一段代码是很容易的，只需要用两行半角单引号将代码包裹住就可以了。"></a>在markdown中引用一段代码是很容易的，只需要用两行半角单引号将代码包裹住就可以了。</h3><h3 id="其位置在tab键上方。"><a href="#其位置在tab键上方。" class="headerlink" title="其位置在tab键上方。"></a>其位置在tab键上方。</h3></li></ul><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--代码段--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;这是一个一级标题&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;这是一个段落&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;a helf=&quot;链接地址&quot;&gt;</span><br><span class="line">&lt;img src=&quot;图片地址&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><ul><li><h2 id="简单的字体样式"><a href="#简单的字体样式" class="headerlink" title="简单的字体样式"></a>简单的字体样式</h2><h3 id="字体的粗细倾斜都只需要用-标记来表示。"><a href="#字体的粗细倾斜都只需要用-标记来表示。" class="headerlink" title="字体的粗细倾斜都只需要用*标记来表示。"></a>字体的粗细倾斜都只需要用*标记来表示。</h3></li></ul><hr><p><em>这是一段倾斜字体</em></p><p><strong>这是一段加粗字体</strong></p><p><strong><em>这是一段倾斜加粗字体</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*这是一段倾斜字体*</span><br><span class="line"></span><br><span class="line">**这是一段加粗字体**</span><br><span class="line"></span><br><span class="line">***这是一段倾斜加粗字体***</span><br></pre></td></tr></table></figure><hr><ul><li><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格是使用-来表示的，几行几列都使用-来分割开来就好。"><a href="#表格是使用-来表示的，几行几列都使用-来分割开来就好。" class="headerlink" title="表格是使用|来表示的，几行几列都使用|来分割开来就好。"></a>表格是使用|来表示的，几行几列都使用|来分割开来就好。</h3></li></ul><hr><ul><li>表格</li></ul><table><thead><tr><th style="text-align:left">表头一</th><th style="text-align:center">表头二</th><th style="text-align:right">表头三</th></tr></thead><tbody><tr><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr></tbody></table><ul><li>代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表头一|表头二|表头三|</span><br><span class="line">:---|:---:|---:|</span><br><span class="line">左对齐|居中对齐|右对齐</span><br></pre></td></tr></table></figure><hr><ul><li><h2 id="markdown相关编译器"><a href="#markdown相关编译器" class="headerlink" title="markdown相关编译器"></a>markdown相关编译器</h2><p>由于我比较懒，所以并没有专门下载相关的编译器。我本身是使用Dw编写的。markdown是纯文本文档，所以它是一门可以用任何文档编辑器打开编辑的语言。而编辑器只是给我们提供一个辅助的作用，可以给我们提供方便。</p></li><li><p>支持markdown编辑和预览的工具：<br><a href="https://note.youdao.com/?keyfrom=ydoc" target="_blank" rel="noopener">有道云云笔记</a><br><a href="https://www.jianshu.com/apps?utm_medium=desktop&amp;utm_source=navbar-apps" target="_blank" rel="noopener">简书</a></p></li><li>专业的markdown编译工具：</li></ul><p><a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></p><blockquote><p>用户可以通过键盘快捷键和工具栏按钮来使用或者移除 Markdown 格式。MarkdownPad左右栏的分割方式令用户可以实时看到 HTML 格式的 Markdown 文档。 </p></blockquote><p><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a></p><blockquote><p>Mou 是 Mac下杰出的 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等。 </p></blockquote><p><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a></p><blockquote><p>MarkPad 是款开源的 Markdown 编辑器，与 Window 8 风格和谐友好的界面，可以直接在你的博客或者 GitHub 中打开、保存文档，直接将图片粘贴到 Markdown 文档中。</p></blockquote><p><a href="http://jbt.github.io/markdown-editor/" target="_blank" rel="noopener">MarkdownEditor</a></p><blockquote><p>MarkdownEditor 是一款基于浏览器的 Markdown 文本编辑器，功能非常简单实用。</p></blockquote><hr><ul><li><h2>保存</h2></li></ul><blockquote><p>最后将编辑好的markdown文档保存为.md格式就可以用对应工具编辑和查看效果了。</p></blockquote><blockquote><p>markdown标记语言因其简洁性，被常用于博文等文档的编写。本博客是基于hexo搭建的，其中博客也都是基于markdown语言编写的。</p></blockquote><hr><ul><li><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南</a><br>这是我参考过的简书上的一个markdown新手教程</li><li><a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明</a><br>这是我参考的一个markdown的简体中文版语法说明文档</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;br&gt;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，&amp;gt;并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML &amp;gt;格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最&amp;gt;大灵感来源其实是纯文本电子邮件的格式。&lt;br&gt;总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文&amp;gt;字两旁加上星号，看起来就像&lt;em&gt;强调&lt;/em&gt;。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引&amp;gt;用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博文的创建和编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E6%96%87%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BC%96%E5%86%99/"/>
    
    
      <category term="博文创建" scheme="http://yoursite.com/tags/%E5%8D%9A%E6%96%87%E5%88%9B%E5%BB%BA/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
